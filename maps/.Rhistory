tabla <- data.frame(X1,Y1)
data(BCI)
library(vegan)
data(BCI)
mod <- rad.lognormal(BCI[1,])
mod
class(mod)
names(mod)
mod$fitted.values
Y1 <- mod$y
mod$rank
mod$fitted.values
X1 <- mod$residuals
mod <- radfit(BCI[1,])
mod
mod <- radfit(BCI[3:5,])
mod
plot(mod, pch=19, main="casa", legend = "")
plot(mod, pch=19, main="casa")
plot(mod, pch=19, main="casa", legend="")
plot(mod, pch=19, main="casa", legend="", auto.key=NULL)
plot(mod, pch=19, main="casa", auto.key=NULL)
plot(mod, pch=19, main="casa", auto.key=list(space="down"))
plot(mod, pch=19, main="casa", auto.key=FALSE)
plot(mod, pch=19, main="casa", auto.key=FALSE)
plot(mod, pch=19, main="", auto.key=FALSE)
mod <- radfit(BCI[3:15,])
mod
plot(mod, pch=19, main="", auto.key=FALSE)
mod
plot(mod[5,], pch=19, main="", auto.key=FALSE)
class(mod)
mod[2,]
dim(mod)
class(mod)
plot(mod[5,], pch=19, main="", auto.key = list(space = "right", points = FALSE, lines = TRUE))
plot(mod[5,], pch=19, main="", auto.key = list(space = "right", points = FALSE, lines = FALSE))
plot(mod[5,], pch=19, main="")
plot(mod, pch=19, main="", auto.key = list(space = "right", points = FALSE, lines = FALSE))
library(taxize)
downstream("Chenopodium", db = 'itis', downto = 'Species', verbose = FALSE)
help(downstream)
HHH <- downstream("Chenopodium", db = c('col','itis'), downto = 'Species', verbose = FALSE)
ids <- get_ids("Chenopodium", db = c('col','itis'))
HHH1
ids
ids$col
ids$itis
ids
summary(ids)
cat("\14") #Para limpiar la consola
list.files()
shiny::runApp('Dropbox/JANO/r.intro.exam/shiny/First_Shiny')
shiny::runApp('Dropbox/JANO/r.intro.exam/shiny/First_Shiny')
shiny::runApp('Dropbox/JANO/r.intro.exam/shiny/First_Shiny')
shiny::runApp('Dropbox/JANO/r.intro.exam/shiny/First_Shiny')
help(terms)
shiny::runApp('Dropbox/JANO/r.intro.exam/shiny/First_Shiny')
shiny::runApp('Dropbox/JANO/r.intro.exam/shiny/First_Shiny')
shiny::runApp('Dropbox/JANO/r.intro.exam/shiny/First_Shiny')
shiny::runApp('Dropbox/JANO/r.intro.exam/shiny/First_Shiny')
ls()
head(Tabla3)
head(Tabla2)
shiny::runApp('Dropbox/JANO/r.intro.exam/shiny/First_Shiny')
shiny::runApp('Dropbox/JANO/r.intro.exam/shiny/First_Shiny')
shiny::runApp('Dropbox/JANO/r.intro.exam/shiny/First_Shiny')
shiny::runApp('Dropbox/JANO/r.intro.exam/shiny/First_Shiny')
shiny::runApp('Dropbox/JANO/r.intro.exam/shiny/First_Shiny')
shiny::runApp('Dropbox/JANO/r.intro.exam/shiny/First_Shiny')
shiny::runApp('Dropbox/JANO/r.intro.exam/shiny/First_Shiny')
shiny::runApp('Dropbox/JANO/r.intro.exam/shiny/First_Shiny')
shiny::runApp('Dropbox/JANO/r.intro.exam/shiny/First_Shiny')
shiny::runApp('Dropbox/JANO/r.intro.exam/shiny/First_Shiny')
shiny::runApp('Dropbox/JANO/r.intro.exam/shiny/First_Shiny')
shiny::runApp('Dropbox/JANO/r.intro.exam/shiny/First_Shiny')
shiny::runApp('Dropbox/JANO/r.intro.exam/shiny/First_Shiny')
shiny::runApp('Dropbox/JANO/r.intro.exam/shiny/First_Shiny')
shiny::runApp('Dropbox/JANO/r.intro.exam/shiny/First_Shiny')
shiny::runApp('Dropbox/JANO/r.intro.exam/shiny/First_Shiny')
shiny::runApp('Dropbox/JANO/r.intro.exam/shiny/First_Shiny')
shiny::runApp('Dropbox/JANO/r.intro.exam/shiny/First_Shiny')
setwd("~/Droprbox/JANO/r.intro.exam/shiny/First_Shiny/")
setwd("~/Droprbox/JANO/r.intro.exam/shiny/First_Shiny/")
Tabla1 <- read.table("jec12471-sup-0003-AppendixS3.txt", head=T)
library(vegan) #Solo para cargar la base de datos de BCI
TablaH <- BCI[1:23,] #Solo escojo unos renglones (En este caso sitios)
require(reshape)
require(rareNMtests)
sbr.q0 <- rarefaction.sample(TablaH, q=0)
data(BCI)
TablaH <- BCI[1:23,] #Solo escojo unos renglones (En este caso sitios)
sbr.q0 <- rarefaction.sample(TablaH, q=0)
TablaQ <- BCI[24:33,]
sbr.q1 <- rarefaction.sample(TablaQ, q=0)
FinalData <- merge(sbr.q0, sbr.q1, by="sample-size", all=T)
names(FinalData)
names(FinalData)[2] <- c("larrea")
names(FinalData)[3] <- c("pela")
MIN <- min(FinalData[,-1], na.rm=T)
MAX <- max(FinalData[,-1], na.rm=T)
plot(FinalData[,1], FinalData[,2], lwd=2,xlab="Sampling units", ylab="Number Species", ylim=c(MIN,MAX),type="l", main="Sample-based rarefaction")
lines(FinalData[,1], FinalData[,3], lwd=2, lty=1, col="red")
dim(BCI)
TablaL <- BCI[34:50]
sbr.q2 <- rarefaction.sample(TablaL, q=0)
FinalData <- merge(sbr.q0, sbr.q1, sbr.q2 by="sample-size", all=T)
FinalData <- merge(sbr.q0, sbr.q1, sbr.q2, by="sample-size", all=T)
sbr.q2
FinalData <- merge(sbr.q0, sbr.q1, sbr.q2, by="sample-size", all=T)
FinalData <- merge(sbr.q0, sbr.q1, by="sample-size", all=T)
FinalData <- merge(FinalData, sbr.q2, by="sample-size", all=T)
FinalData
TablaL <- BCI[34:50,]
sbr.q0 <- rarefaction.sample(TablaH, q=0)
sbr.q1 <- rarefaction.sample(TablaQ, q=0)
sbr.q2 <- rarefaction.sample(TablaL, q=0)
FinalData <- merge(sbr.q0, sbr.q1, by="sample-size", all=T)
FinalData <- merge(FinalData, sbr.q2, by="sample-size", all=T)
FinalData
names(FinalData)
names(FinalData)[2] <- c("TablaH")
names(FinalData)[3] <- c("TablaQ")
names(FinalData)[4] <- c("TablaL")
MIN <- min(FinalData[,-1], na.rm=T)
MAX <- max(FinalData[,-1], na.rm=T)
plot(FinalData[,1], FinalData[,2], lwd=2,xlab="Sampling units", ylab="Number Species", ylim=c(MIN,MAX),type="l", main="Sample-based rarefaction")
lines(FinalData[,1], FinalData[,3], lwd=2, lty=1, col="red")
lines(FinalData[,1], FinalData[,4], lwd=2, lty=1, col="red")
lines(FinalData[,1], FinalData[,4], lwd=2, lty=1, col="blue")
library(vegan) #Solo para cargar la base de datos de BCI
library(reshape)
library(rareNMtests)
data(BCI)
dim(BCI) #para ver las dimensiones de la tabla BCI
TablaH <- BCI[1:23,] #Solo escojo unos renglones (En este caso sitios)
TablaQ <- BCI[24:33,]
TablaL <- BCI[34:50,]
sbr.q0 <- rarefaction.sample(TablaH, q=0)
sbr.q1 <- rarefaction.sample(TablaQ, q=0)
sbr.q2 <- rarefaction.sample(TablaL, q=0)
FinalData <- merge(sbr.q0, sbr.q1, by="sample-size", all=T)
FinalData <- merge(FinalData, sbr.q2, by="sample-size", all=T)
FinalData
names(FinalData)
names(FinalData)[2] <- c("TablaH")
names(FinalData)[3] <- c("TablaQ")
names(FinalData)[4] <- c("TablaL")
FinalData1 <- na.omit(FinalData)
FinalData1
MIN <- min(FinalData[,-1], na.rm=T)
MAX <- max(FinalData[,-1], na.rm=T)
plot(FinalData[,1], FinalData[,2], lwd=2,xlab="Sampling units", ylab="Number Species", ylim=c(MIN,MAX),type="l", main="Sample-based rarefaction")
lines(FinalData[,1], FinalData[,3], lwd=2, lty=1, col="red")
lines(FinalData[,1], FinalData[,4], lwd=2, lty=1, col="blue")
abline(v=nrow(FinalData1), col="gray", lty=2) #ALEX... estas pueden ser opcionales
abline(h=FinalData1[nrow(FinalData1),], col="gray", lty=2) #ALEX... estas pueden ser opcionales
library(ade4)
help(ade4)
data(aviurba)
head(aviurba$fau)
head(aviurba$traits)
head(aviurba$mil)
head(aviurba$fau)
head(aviurba$mil)
help(aviurba)
coa1 <- dudi.coa(aviurba$fau, scannf = FALSE, nf = 2)
dudimil <- dudi.hillsmith(aviurba$mil, scannf = FALSE, nf = 2, row.w = coa1$lw)
duditrait <- dudi.hillsmith(aviurba$traits, scannf = FALSE, nf = 2, row.w = coa1$cw)
rlq1 <- rlq(dudimil, coa1, duditrait, scannf = FALSE, nf = 2)
plot(rlq1)
fourthcorner.rlq(rlq1,type="Q.axes")
fourthcorner.rlq(rlq1,type="R.axes")
four.comb.default <- fourthcorner(aviurba$mil,aviurba$fau,aviurba$traits,nrepet=99)
summary(four.comb.default)
plot(four.comb.default, stat = "G")
four.comb.fdr <- fourthcorner(aviurba$mil, aviurba$fau, aviurba$traits,
nrepet = 99, p.adjust.method.G = 'fdr', p.adjust.method.D = 'fdr')
summary(four.comb.fdr)
plot(four.comb.fdr, stat = "G")
## Explicit procedure to combine the results of two models
## proposed in Dray and Legendre (2008);the above does this implicitly
four2 <- fourthcorner(aviurba$mil,aviurba$fau,aviurba$traits,nrepet=99,modeltype=2)
four4 <- fourthcorner(aviurba$mil,aviurba$fau,aviurba$traits,nrepet=99,modeltype=4)
four.comb <- combine.4thcorner(four2, four4)
summary(four.comb)
plot(four.comb, stat = "G")
four.comb.default <- fourthcorner(aviurba$mil,aviurba$fau,aviurba$traits,modeltype=1, nrepet=99)
summary(four.comb.default)
plot(four.comb.default, stat = "G")
four.comb.default <- fourthcorner(aviurba$mil,aviurba$fau,aviurba$traits,modeltype=1, p.adjust.method.G=0.1, nrepet=99)
PP <- p.adjust(0.1, "BH")
PP
four.comb.default <- fourthcorner(aviurba$mil,aviurba$fau,aviurba$traits,modeltype=1, p.adjust.method.G=PP, nrepet=99)
four.comb.default <- fourthcorner(aviurba$mil,aviurba$fau,aviurba$traits,modeltype=1, nrepet=999)
summary(four.comb.default)
plot(four.comb.default, stat = "G")
four.comb.default <- fourthcorner(aviurba$mil,aviurba$fau,aviurba$traits,modeltype=2, nrepet=999)
plot(four.comb.default, stat = "G")
four.comb.default <- fourthcorner(aviurba$mil,aviurba$fau,aviurba$traits,modeltype=3, nrepet=999)
plot(four.comb.default, stat = "G")
four.comb.default <- fourthcorner(aviurba$mil,aviurba$fau,aviurba$traits,modeltype=4, nrepet=999)
plot(four.comb.default, stat = "G")
four.comb.default <- fourthcorner(aviurba$mil,aviurba$fau,aviurba$traits,modeltype=5, nrepet=999)
plot(four.comb.default, stat = "G")
four.comb.fdr <- fourthcorner(aviurba$mil, aviurba$fau, aviurba$traits,
four.comb.default <- fourthcorner(aviurba$mil,aviurba$fau,aviurba$traits,modeltype=6, nrepet=999)
plot(four.comb.default, stat = "G")
library(ade4)
data(chats)
chats
chatsw <- data.frame(t(chats))
chatscoa <- dudi.coa(chatsw, scann = FALSE)
par(mfrow = c(2,2))
table.cont(chatsw, abmean.x = TRUE, csi = 2, abline.x = TRUE,
clabel.r = 1.5, clabel.c = 1.5)
table.cont(chatsw, abmean.y = TRUE, csi = 2, abline.y = TRUE,
clabel.r = 1.5, clabel.c = 1.5)
table.cont(chatsw, x = chatscoa$c1[,1], y = chatscoa$l1[,1],
abmean.x = TRUE, csi = 2, abline.x = TRUE, clabel.r = 1.5, clabel.c = 1.5)
table.cont(chatsw, x = chatscoa$c1[,1], y = chatscoa$l1[,1],
abmean.y = TRUE, csi = 2, abline.y = TRUE, clabel.r = 1.5, clabel.c = 1.5)
par(mfrow = c(1,1))
## Not run:
data(rpjdl)
rpjdl
w <- data.frame(t(rpjdl$fau))
w
wcoa <- dudi.coa(w, scann = FALSE)
table.cont(w, abmean.y = TRUE, x = wcoa$c1[,1], y = rank(wcoa$l1[,1]),
csi = 0.2, clabel.c = 0, row.labels = rpjdl$lalab, clabel.r = 0.75)
library(agricolae)
citations("agricolae")
citation("agricolae")
install.packages("TR8", dependencies=T)
library(TR8)
available_TR8
available_Tr8
available_tr8
head(available_tr8)
my_species <- c("Zea mays", "Salix alba")
my_traits <- c("h_max", "h_min", "le_area", "li_form")
my_traits
my_Data <- tr8(species_list=my_species, download_list=my_traits)
print(my_Data)
my_species <- c("Zea mays", "Salix alba", "Gossypium hirsutum")
my_Data <- tr8(species_list=my_species, download_list=my_traits)
print(my_Data)
traits_dataframe <- extract_traits(my_Data)
traits_dataframe
lookup(my_Data)
specie_names <- names(veg_data)
data(veg_data)
library(taxize)
help(tnrs)
mynames <- c("Helianthus annuus", "Poa annua")
mynames
tnrs(query = mynames, source = "iPlant_TNRS")
mynames <- c("Helianthus anuus", "Poa annua")
tnrs(query = mynames, source = "iPlant_TNRS")
mynames <- c("Helianthus anus", "Poa annua")
tnrs(query = mynames, source = "iPlant_TNRS")
mynames <- c("Helianthu annuus", "Poa annua")
mynames
tnrs(query = mynames, source = "iPlant_TNRS")
mynames <- c("Helianthu annuu", "Poa annua")
mynames
tnrs(query = mynames, source = "iPlant_TNRS")
mynames <- c("Helianthu annu", "Poa annua")
mynames
tnrs(query = mynames, source = "iPlant_TNRS")
mynames <- c("Helinthu annu", "Poa annua")
mynames
tnrs(query = mynames, source = "iPlant_TNRS")
mynames <- c("Helianthus annuus", "Poa annua", "Gossypium hirsutum")
mynames
tnrs(query = mynames, source = "iPlant_TNRS")
shiny::runApp('Dropbox/JANO/2016/Conabio/shiny_maiz')
shiny::runApp('Dropbox/JANO/2016/Conabio/shiny_maiz')
shiny::runApp('Dropbox/JANO/2016/Conabio/shiny_maiz')
shiny::runApp('Dropbox/JANO/2016/Conabio/shiny_maiz')
shiny::runApp('Dropbox/JANO/2016/Conabio/shiny_maiz')
shiny::runApp('Dropbox/JANO/2016/Conabio/shiny_maiz')
shiny::runApp('Dropbox/JANO/2016/Conabio/shiny_maiz')
shiny::runApp('Dropbox/JANO/2016/Conabio/shiny_maiz')
shiny::runApp('Dropbox/JANO/2016/Conabio/shiny_maiz')
shiny::runApp('Dropbox/JANO/2016/Conabio/shiny_maiz')
LL<-leaflet(data = TableL[20000:22000,]) %>% addTiles() %>%
addMarkers(~long, ~lat, popup = ~Raza_primaria)
LL<-leaflet(data = TableL[20000:22000,]) %>% addTiles() %>%
addMarkers(~longitude, ~latitude, popup = ~Raza_primaria)
LL
LL<-leaflet(data = TableL[,]) %>% addTiles() %>%
addMarkers(~longitude, ~latitude, popup = ~Raza_primaria)
LL
head(TableL)
LL<-leaflet(data = TableL[,]) %>% addTiles() %>%
addMarkers(~longitude, ~latitude, popup = ~Estado)
LL
LL<-leaflet(data = TableL[,])  %>%
addMarkers(~longitude, ~latitude, popup = ~Estado)
LL
LL<-leaflet(data = TableL[,]) %>% addTiles() %>%
addMarkers(~longitude, ~latitude, popup =Raza_primaria)
LL<-leaflet(data = TableL[,]) %>% addTiles() %>%
addMarkers(~longitude, ~latitude, popup =~Raza_primaria)
LL
LL
help(addMarkers)
help(addMarkers)
LL<-leaflet(data = TableL) %>% addTiles() %>%
addCircleMarkers(~longitude, ~latitude, popup =~Raza_primaria, opacity=0.5)
LL
LL<-leaflet(data = TableL) %>% addTiles() %>%
addCircleMarkers(~longitude, ~latitude,  opacity=0.5)
LL
head(TableL)
LL<-leaflet(data = TableL) %>% addTiles() %>%
addCircleMarkers(~longitude, ~latitude, popup =~Complejo_racial, opacity=0.5)
LL
dim(TableL)
LL<-leaflet(data = TableL[,1:22931]) %>% addTiles() %>%
addCircleMarkers(~longitude, ~latitude, popup =~Complejo_racial, opacity=0.5)
LL
LL<-leaflet(data = TableL[,10000:22931]) %>% addTiles() %>%
addCircleMarkers(~longitude, ~latitude, popup =~Complejo_racial, opacity=0.5)
LL
LL<-leaflet(data = TableL[,10000:22931]) %>% addTiles() %>%
addCircleMarkers(~longitude, ~latitude,  opacity=0.5)
LL
LL<-leaflet(data = TableL[,20000:22931]) %>% addTiles() %>%
addCircleMarkers(~longitude, ~latitude,  opacity=0.5)
LL
mapleaflet(data = TableL, dest = ".")
library(spooc)
library(spocc)
mapleaflet(data = TableL, dest = ".")
head(TableL)
LL<-leaflet(data = TableL[,20000:22931]) %>% addTiles() %>%
addCircleMarkers(~longitude, ~latitude,  opacity=0.5, color=pal(Raza_primaria))
pal <- colorQuantile("YlOrRd", NULL, n = 8)
orstationc
leaflet(orstationc) %>%
addTiles() %>%
addCircleMarkers(color = ~pal(tann))
data(orstationc)
LL<-leaflet(data = TableL[,20000:22931]) %>% addTiles() %>%
addCircleMarkers(~longitude, ~latitude,  opacity=0.5, popup=~as.character(raza_primaria))
LL<-leaflet(data = TableL[,10000:22931]) %>% addTiles() %>%
addCircleMarkers(~longitude, ~latitude, popup =~as.character(Complejo_racial), opacity=0.5)
LL<-leaflet(data = TableL[,]) %>% addTiles() %>%
addCircleMarkers(~longitude, ~latitude, popup =~as.character(Complejo_racial), opacity=0.5)
LL
LL<-leaflet(data = TableL[,]) %>% addTiles() %>%
addCircleMarkers(~longitude, ~latitude, popup =~Complejo_racial, opacity=0.5)
LL
summary(TableL)
TableL1<-TableL[na.omit(TableL$Complejo_racial),]
summary(TableL1)
head(TableL)
TableL$Complejo_racial
head(TableL)
TableL1<-TableL[na.omit(TableL$Raza_primaria),]
summary(TableL1)
TableL$Raza_primaria
levels(TableL$Raza_primaria)
TableL1<-TableL[TableL$Raza_primaria=="Vandenho",]
summary(TableL1)
LL<-leaflet(data = TableL1[,]) %>% addTiles() %>%
addCircleMarkers(~longitude, ~latitude, popup =~Complejo_racial, opacity=0.5)
LL
head(TableL1)
LL<-leaflet(data = TableL1[,]) %>% addTiles() %>%
addMarkers(~longitude, ~latitude, popup =~Complejo_racial)
LL
library(ggplot2)
library(rgeos)
library(maptools)
library(rgdal)
library(scales)
library(downloader)
library(shiny)
library(leaflet)
library(dplyr)
library(RColorBrewer)
library(readr)
#setwd("C:\\Users\\aponce\\Dropbox\\JANO\\2016\\Conabio\\shiny_maiz\\")
setwd("~/Dropbox/JANO/2016/Conabio/shiny_maiz/")
#getwd()
#dir()
#TableL<-read_csv("RawData.csv", col_names=T)
CodigoEdo <- read.table("~/Dropbox/JANO/2016/Conabio/shiny_maiz/maps/CodigoEdo.txt", head=T,sep="\t")
#require("~/Dropbox/JANO/2016/Conabio/shiny_maiz/maps/hexagongrid.R")
ls()
head(CodigoEdo)
names(CodigoEdo)[2] <-c("state")
names(CodigoEdo)[1] <-c("state_code")
TableP<-read.table("RawData.txt", head=T, sep="\t")
#TableP<-read.csv("RawData.csv", head=T)
dim(TableP)
names(TableP)
TTabla <- TableP%>%
filter(!is.na(Raza_primaria))%>%
filter(!is.na(Latitud))
dim(TTabla)
names(TTabla)
TableL<-TTabla%>%
select(Raza_primaria,Complejo_racial, Estado,Altitud,longitude=Longitud,latitude=Latitud,
Longitud_de_mazorca,Diametro_de_mazorca,Hileras_por_mazorca,Granos_por_hilera, Altura_de_planta,Dias_a_floracion_masculina,
Dias_a_floracion_femenina,Altura_de_mazorca,Mazorcas_por_planta)
TableL<- TableL[order(TableL$Raza_primaria),]
head(TableL)
TableL[TableL$Raza_primaria=="Coscomatepec",]
panel.cor <- function(x, y, digits=2, prefix="", cex.cor, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits=digits)[1]
txt <- paste(prefix, txt, sep="")
if(missing(cex.cor)) cex.cor <- 0.4/strwidth(txt)
text(0.3, 0.3, txt, cex = cex.cor * r)
}
pal <- brewer.pal(10,"Dark2")
pal
#For hexagon plots
#download the hex grid map
#download("~/Dropbox/JANO/2016/Conabio/hexagonsGrid_inR/", "mx_hexgrid.json")
map <- readOGR("mx_hexgrid.json", "OGRGeoJSON")
map
map <- readOGR("~/Dropbox/JANO/2016/Conabio/shiny_maiz/maps/mx_hexgrid.json", "OGRGeoJSON")
download("~/Dropbox/JANO/2016/Conabio/shiny_maiz/maps/", "mx_hexgrid.json")
setwd()
setwd("~/Dropbox/JANO/2016/Conabio/shiny_maiz/maps/")
map <- readOGR("mx_hexgrid.json", "OGRGeoJSON")
help(readOGR)
map
#state abbreviations
centers <- coordinates(map)
centers <- cbind(centers, map@data)
names(centers)[1:3] <- c("lat", "long", "id")
#Hex Grid Map
mapStates <- function(map, party, low = "gray90", high, title = "") {
map@data <- left_join(map@data, party)
mx_map <- fortify(map, region="state_abbr")
ggplot() +
geom_map(map=mx_map, data = mx_map, color="black",
aes(map_id=id, x = long, y = lat)) +
geom_map(map=mx_map, data = map@data, color="white",
aes(map_id = state_abbr, fill = per)) +
coord_map() +
geom_text(data = centers,
aes(label=id, x=lat, y=long), color="white", size=4.5) +
scale_fill_gradient("valores", low = low, high = high) +
theme_bw() +
ggtitle(title) +
theme(panel.border=element_blank()) +
theme(panel.grid=element_blank()) +
theme(axis.ticks=element_blank()) +
theme(axis.text=element_blank()) +
labs(x=NULL, y=NULL)
}
names(TTabla)
TableL1<-TTabla%>%
select(Raza_primaria,Complejo_racial, Estado, Municipio, Localidad)
head(TableL1)
TableL1<- TableL1[order(TableL1$Estado),]
head(TableL1)
dim(TableL1)
TableL1 <- data.frame(TableL1, rep(1,nrow(TableL1)))
head(TableL1)
names(TableL1)[6] <- c("Valores")
attach(TableL1)
TableL2 <- aggregate(TableL1$Valores, by=list(Raza_primaria, Estado), FUN=sum, na.rm=T)
detach(TableL1)
head(TableL2)
names(TableL2)[1] <- c("Raza_primaria")
names(TableL2)[2] <- c("state")
names(TableL2)[3] <- c("per")
createDF <- function(Raza_primaria, per) {
Raza_primaria$temp <- Raza_primaria[[per]]
Raza_primaria %>%
group_by(state) %>%
summarise(per = sum(as.numeric(temp), na.rm = TRUE))
}
head(TableL2)
Tuxpenho <- subset(TableL2, Raza_primaria=="Celaya")
Tuxpenho1 <- merge(CodigoEdo, Tuxpenho, by="state", all.x=T)
head(Tuxpenho1)
Tuxpenho1 <- Tuxpenho1[,c(1,2,5)]
Tuxpenho1[is.na(Tuxpenho1)] <- 0
mapStates(map, Tuxpenho1, high = "#37b4b7", title = "")
pal
sample(pal,8)
sample(pal,1)
sample(pal,1)
mapStates(map, Tuxpenho1, high = sample(pal,1), title = "")
shiny::runApp('~/Dropbox/JANO/2016/Conabio/shiny_maiz')
shiny::runApp('~/Dropbox/JANO/2016/Conabio/shiny_maiz')
shiny::runApp('~/Dropbox/JANO/2016/Conabio/shiny_maiz')
shiny::runApp('~/Dropbox/JANO/2016/Conabio/shiny_maiz')
shiny::runApp('~/Dropbox/JANO/2016/Conabio/shiny_maiz')
shiny::runApp('~/Dropbox/JANO/2016/Conabio/shiny_maiz')
shiny::runApp('~/Dropbox/JANO/2016/Conabio/shiny_maiz')
shiny::runApp('~/Dropbox/JANO/2016/Conabio/shiny_maiz')
shiny::runApp('~/Dropbox/JANO/2016/Conabio/shiny_maiz')
shiny::runApp('~/Dropbox/JANO/2016/Conabio/shiny_maiz')
shiny::runApp('~/Dropbox/JANO/2016/Conabio/shiny_maiz')
shiny::runApp('~/Dropbox/JANO/2016/Conabio/shiny_maiz')
shiny::runApp('~/Dropbox/JANO/2016/Conabio/shiny_maiz')
shiny::runApp('~/Dropbox/JANO/2016/Conabio/shiny_maiz')
shiny::runApp('~/Dropbox/JANO/2016/Conabio/shiny_maiz')
